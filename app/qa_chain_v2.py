import os
from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings, HuggingFacePipeline
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline
import torch

def load_vector_store():
    print("‚úÖ Loading FAISS index...")
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    return FAISS.load_local("data/faiss_index", embeddings, allow_dangerous_deserialization=True)

def initialize_llm():
    print("‚ö° Initializing Hugging Face LLM...")
    model_name = "google/flan-t5-base"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(
        model_name,
        torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
        device_map="auto" if torch.cuda.is_available() else None
    )
    pipe = pipeline(
        "text2text-generation",
        model=model,
        tokenizer=tokenizer,
        max_length=512,
        temperature=0,
        do_sample=False,
        device=0 if torch.cuda.is_available() else -1
    )
    return HuggingFacePipeline(pipeline=pipe)

def create_qa_chain(vector_store, llm):
    prompt_template = """
You are a helpful assistant. Use the provided context to answer the question concisely.
If the answer is not in the context, say "I don't know".

Context:
{context}

Question: {question}

Answer:
"""
    prompt = PromptTemplate(template=prompt_template, input_variables=["context", "question"])
    return RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=vector_store.as_retriever(search_kwargs={"k": 3}),
        chain_type_kwargs={"prompt": prompt},
        return_source_documents=True
    )

def summarize_document(vector_store, llm):
    """Fetch all chunks and create a clean, professional summary."""
    docs = vector_store.similarity_search("", k=1000)  # Fetch all chunks
    text_chunks = [doc.page_content.strip() for doc in docs]

    # Remove duplicates while preserving order
    seen = set()
    unique_chunks = []
    for chunk in text_chunks:
        if chunk not in seen:
            seen.add(chunk)
            unique_chunks.append(chunk)

    # Limit text to avoid exceeding model token limit
    full_text = " ".join(unique_chunks)[:5000]

    # Clear, structured summarization prompt
    prompt = f"""
Summarize the following document into a clean, professional format.

Rules:
- Remove duplicate or repeated lines.
- Avoid showing Q&A labels unless essential.
- Provide bullet-point **Key Points** followed by a short **Conclusion**.
- Keep it concise but cover all important aspects.

Document:
{full_text}

Now produce the summary:
"""

    raw_summary = llm(prompt)

    # Add title for presentation
    final_summary = f"""
üìù **Document Summary**

**Key Points:**
{raw_summary}

**Conclusion:**
This summary was generated by the Smart PDF Chatbot v2, extracting the most relevant insights without unnecessary repetition.
"""
    return final_summary


def main():
    vector_store = load_vector_store()
    llm = initialize_llm()
    qa_chain = create_qa_chain(vector_store, llm)

    print("\nü§ñ Smart PDF Chatbot v2 is ready!")
    print("Ask questions about your document. Type 'exit' to quit.\n")

    while True:
        question = input("Ask a question: ").strip()
        if question.lower() == "exit":
            print("Goodbye!")
            break

        # Summary detection
        if any(word in question.lower() for word in ["summary", "summarize", "overview"]):
            print("üìù Generating summary...")
            summary = summarize_document(vector_store, llm)
            print(f"\nüìù Summary:\n{summary}\n")
        else:
            result = qa_chain.invoke({"query": question})
            print(f"\n‚úÖ Answer: {result['result']}\n")

            if result.get("source_documents"):
                print("üìö Sources:")
                for i, doc in enumerate(result["source_documents"], 1):
                    snippet = doc.page_content.strip().replace("\n", " ")
                    print(f"{i}. {snippet[:150]}...")
            print("-" * 50)

if __name__ == "__main__":
    main()
